<?php

/*
 * PUQcloud - Free Cloud Billing System
 * Main billing system core logic
 *
 * Copyright (C) 2025 PUQ sp. z o.o.
 * Licensed under GNU GPLv3
 * https://www.gnu.org/licenses/gpl-3.0.html
 *
 * Author: Dmytro Kravchenko <dmytro.kravchenko@ihostmi.com>
 * Website: https://puqcloud.com
 * E-mail: support@puqcloud.com
 *
 * Do not remove this header.
 */

namespace Database\Factories;

use App\Models\ProductAttributeGroup;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

class ProductAttributeGroupFactory extends Factory
{
    protected $model = ProductAttributeGroup::class;

    public function definition(): array
    {
        $types = [
            'compute' => [
                'name' => 'Compute Resources',
                'description' => 'CPU and processing power specifications',
            ],
            'storage' => [
                'name' => 'Storage Options',
                'description' => 'Disk space and storage configurations',
            ],
            'network' => [
                'name' => 'Network Features',
                'description' => 'Bandwidth and network connectivity options',
            ],
            'security' => [
                'name' => 'Security Features',
                'description' => 'Security and protection capabilities',
            ],
            'backup' => [
                'name' => 'Backup Services',
                'description' => 'Data backup and recovery options',
            ],
            'software' => [
                'name' => 'Software Stack',
                'description' => 'Software and application support',
            ],
            'support' => [
                'name' => 'Support Level',
                'description' => 'Technical support and assistance',
            ],
        ];

        $type = $this->faker->randomElement(array_keys($types));
        $typeData = $types[$type];

        return [
            'uuid' => Str::uuid(),
            'key' => $type,
            'hidden' => $this->faker->boolean(10), // 10% chance to be hidden
            'notes' => 'Generated by ProductAttributeGroupFactory',
        ];
    }

    public function withType(string $type): self
    {
        $types = [
            'compute' => [
                'name' => 'Compute Resources',
                'description' => 'CPU and processing power specifications',
            ],
            'storage' => [
                'name' => 'Storage Options',
                'description' => 'Disk space and storage configurations',
            ],
            'network' => [
                'name' => 'Network Features',
                'description' => 'Bandwidth and network connectivity options',
            ],
            'security' => [
                'name' => 'Security Features',
                'description' => 'Security and protection capabilities',
            ],
            'backup' => [
                'name' => 'Backup Services',
                'description' => 'Data backup and recovery options',
            ],
            'software' => [
                'name' => 'Software Stack',
                'description' => 'Software and application support',
            ],
            'support' => [
                'name' => 'Support Level',
                'description' => 'Technical support and assistance',
            ],
        ];

        return $this->state(function (array $attributes) use ($type) {
            return [
                'key' => $type,
            ];
        });
    }

    public function withTranslations(): self
    {
        return $this->afterCreating(function (ProductAttributeGroup $group) {
            $types = [
                'compute' => [
                    'name' => 'Compute Resources',
                    'short_description' => 'CPU and RAM specifications',
                    'description' => 'Detailed information about processing power, CPU cores, memory allocation, and computational resources available for your service.',
                ],
                'storage' => [
                    'name' => 'Storage Options',
                    'short_description' => 'Disk space and storage',
                    'description' => 'Storage capacity, disk types (SSD/HDD), IOPS performance, and data persistence options for your applications and data.',
                ],
                'network' => [
                    'name' => 'Network Features',
                    'short_description' => 'Bandwidth and connectivity',
                    'description' => 'Network bandwidth, transfer limits, connectivity options, load balancing, and networking infrastructure specifications.',
                ],
                'security' => [
                    'name' => 'Security Features',
                    'short_description' => 'Protection and security',
                    'description' => 'Security measures including firewalls, DDoS protection, SSL certificates, access controls, and compliance standards.',
                ],
                'backup' => [
                    'name' => 'Backup Services',
                    'short_description' => 'Data backup and recovery',
                    'description' => 'Automated backup schedules, retention policies, disaster recovery options, and data restoration capabilities.',
                ],
                'software' => [
                    'name' => 'Software Stack',
                    'short_description' => 'Operating system and software',
                    'description' => 'Available operating systems, pre-installed software, development frameworks, and application runtime environments.',
                ],
                'support' => [
                    'name' => 'Support Level',
                    'short_description' => 'Technical support',
                    'description' => 'Support availability, response times, communication channels, and technical assistance levels included with your service.',
                ],
            ];

            $typeData = $types[$group->key] ?? $types['compute'];

            $group->name = $typeData['name'];
            $group->short_description = $typeData['short_description'];
            $group->description = $typeData['description'];
            $group->save();
        });
    }
}
